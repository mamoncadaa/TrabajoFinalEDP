# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SuKtBUd5jZ_Bkqh-c5CW42DNKcsoZY21
"""

##Librerías
import math 
from math import e
from math import cos
from math import sin
import numpy as np
import pandas as pd
import sympy as sp
from sympy import *
from scipy.optimize import fsolve
from tabulate import tabulate
import matplotlib.pyplot as plt
t3,t2,t1,t,t_1= symbols('t3,t2,t1,t,t_1')
yj31,yj21,yj1,y1j,y_j1= symbols('yj31,yj21,yj1,y1j,y_j1')
yj32,yj22,yj12,y2j,y_j2= symbols('yj32,yj22,yj12,y2j,y_j2')

##Funciones del PVI
def func1(x,y1,y2):
  return 9*y1+24*y2+5*cos(x)-(1/3)*sin(x)
def func2(x,y1,y2):
  return -24*y1-51*y2-9*cos(x)+(1/3)*sin(x)

##Soluciones del PVI
def sol1(x):
  return 2*e**(-3*x)-e**(-39*x)+(1/3)*cos(x)
def sol2(x):
  return (-1)*e**(-3*x)+2*e**(-39*x)-(1/3)*cos(x)
def sol3(x,ep):
  return 1+x+(e**(x/ep)-1)/(e**(1/ep)-1)

'''
Este código hace uso del método RKF que se encuentra en este mismo repositorio 
'''

##Adams-Moulton 
def moulton(f1,f2,a,b,j,y10,y20):
  h = 2**(-j)
  m= int((b-a)/h)
  e1,e2,x= [],[],[a]
  p,y1rk,y2rk = RKF(f1,f2,sol1,sol2,a,b,j,y10,y20)
  ya1=np.ones(m+1)
  ya2= np.ones(m+1)
  ya1[0:4]= y1rk[0:4]
  ya2[0:4]= y2rk[0:4]

  fx2= y_j2-y2j-(h/720)*(-19*f2(t3,yj31,yj32)+106*f2(t2,yj21,yj22)-264*f2(t1,yj1,yj12)+646*f2(t,y1j,y2j)+251*f2(t_1,y_j1,y_j2))
  fx2= solve(fx2,y_j2)[0]

  print(fx2)
    
  fx1= y_j1-y1j-(h/720)*(-19*f1(t3,yj31,yj32)+106*f1(t2,yj21,yj22)-264*f1(t1,yj1,yj12)+646*f1(t,y1j,y2j)+251*f1(t_1,y_j1,y_j2))
  fx1= solve(fx1.subs(y_j2,fx2),y_j1)[0]

  for i in range(1,m+1):
    x.append(x[i-1]+h)
  print(x)


  for i in range(3,m):

    ya1[i+1]=fx1.subs(t3,x[i-3]).subs(t2,x[i-2]).subs(t1,x[i-1]).subs(t,x[i]).subs(t_1,x[i+1]).subs(yj32,ya2[i-3]).subs(yj31,ya1[i-3]).subs(yj22,ya2[i-2]).subs(yj21,ya1[i-2]).subs(yj12,ya2[i-1]).subs(yj1,ya1[i-1]).subs(y2j,ya2[i]).subs(y1j,ya1[i])

    ya2[i+1]= fx2.subs(t3,x[i-3]).subs(t2,x[i-2]).subs(t1,x[i-1]).subs(t,x[i]).subs(t_1,x[i+1]).subs(yj32,ya2[i-3]).subs(yj31,ya1[i-3]).subs(yj22,ya2[i-2]).subs(yj21,ya1[i-2]).subs(yj12,ya2[i-1]).subs(yj1,ya1[i-1]).subs(y_j1,ya1[i+1]).subs(y2j,ya2[i]).subs(y1j,ya1[i])
  
  for i in range(m+1):
    print(ya1[i])
    print(sol1(x[i]))
    e1.append(abs(ya1[i]-sol1(x[i])))
    e2.append(abs(ya2[i]-sol2(x[i])))

  print(tabulate({'x': x, 'y1': ya1,'Error y1':e1,'y2': ya2,'Error y2':e2 }, headers="keys", tablefmt='fancy_grid'))

  
  return x, ya1, ya2

moulton(func1,func2,0,1,3,4/3,2/3)

##Adams-Moulton 
t3,t2,t1,t,t_1,yj31,yj21,yj1,y1j,y_j1,yj32,yj22,yj12,y2j,y_j2= symbols('t3,t2,t1,t,t_1,yj31,yj21,yj1,y1j,y_j1,yj32,yj22,yj12,y2j,y_j2')
def AMoulton(f1,f2,a,b,j,y10,y20):
  h = 2**(-j)
  M= int((b-a)/h)
  Ys1= np.zeros(M+1)
  Ys2= np.zeros(M+1)
  e1,e2,x= [],[],[a]
  X, Y1r,Y2r = RKF(f1,f2,sol1,sol2,a,b,j,y10,y20)
  Ys1[0:4]= Y1r[0:4]
  Ys2[0:4]= Y2r[0:4]

  fx2= y_j2-y2j-(h/720)*(-19*f2(t3,yj31,yj32)+106*f2(t2,yj21,yj22)-264*f2(t1,yj1,yj12)+646*f2(t,y1j,y2j)+251*f2(t_1,y_j1,y_j2))
  fx2= solve(fx2,y_j2)[0]
    
  fx1= y_j1-y1j-(h/720)*(-19*f1(t3,yj31,yj32)+106*f1(t2,yj21,yj22)-264*f1(t1,yj1,yj12)+646*f1(t,y1j,y2j)+251*f1(t_1,y_j1,y_j2))
  fx1= solve(fx1.subs(y_j2,fx2),y_j1)[0]

  i=3
  while i<M:
    
    Ys1[i+1]= fx1.subs(t3,X[i-3]).subs(t2,X[i-2]).subs(t1,X[i-1]).subs(t,X[i]).subs(t_1,X[i+1]).subs(yj32,Ys2[i-3]).subs(yj31,Ys1[i-3]).subs(yj22,Ys2[i-2]).subs(yj21,Ys1[i-2]).subs(yj12,Ys2[i-1]).subs(yj1,Ys1[i-1]).subs(y2j,Ys2[i]).subs(y1j,Ys1[i])

    Ys2[i+1]= fx2.subs(t3,X[i-3]).subs(t2,X[i-2]).subs(t1,X[i-1]).subs(t,X[i]).subs(t_1,X[i+1]).subs(yj32,Ys2[i-3]).subs(yj31,Ys1[i-3]).subs(yj22,Ys2[i-2]).subs(yj21,Ys1[i-2]).subs(yj12,Ys2[i-1]).subs(yj1,Ys1[i-1]).subs(y_j1,Ys1[i+1]).subs(y2j,Ys2[i]).subs(y1j,Ys1[i])

    i=i+1


  for i in range(M+1):
    print(Ys1[i])
    print(sol1(X[i]))
    e1.append(abs(Ys1[i]-sol1(X[i])))
    e2.append(abs(Ys2[i]-sol2(X[i])))

  print(tabulate({'x': X, 'y1': Ys1,'Error y1':e1,'y2': Ys2,'Error y2':e2 }, headers="keys", tablefmt='fancy_grid'))

  return X, Ys1, Ys2

AMoulton(func,func2,0,1,2,4/3,2/3)